{"version":3,"file":"static/js/4.a346f55d.chunk.js","mappings":"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","sources":["../node_modules/@thirdweb-dev/sdk/dist/vote-55e5c7df.esm.js"],"sourcesContent":["import { _ as _defineProperty } from './QueryParams-bc2daded.esm.js';\nimport { cz as ContractWrapper, ab as ContractMetadata, d1 as VoteContractSchema, aa as ContractEncoder, aL as GasCostEstimator, aM as ContractEvents, aN as ContractInterceptor, aX as VoteType, aZ as fetchCurrencyValue, a_ as fetchCurrencyMetadata } from './thirdweb-checkout-939cdfff.esm.js';\nimport ERC20Abi from '@thirdweb-dev/contracts-js/dist/abis/IERC20.json';\nimport { BigNumber, ethers, Contract } from 'ethers';\nimport 'bn.js';\nimport 'zod';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC165.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155.json';\nimport 'tiny-invariant';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC20_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMulticall.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC20.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedReveal.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC721_V3.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Supply.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ILazyMint.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC721_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/LazyMintWithTier.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IBurnableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IClaimableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDrop1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropERC1155_V2.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDropSinglePhase1155_V1.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Enumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IMintableERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ISignatureMintERC1155.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ERC2771Context.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IAppURI.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IContractMetadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDirectListings.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IEnglishAuctions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IOffers.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPackVRFDirect.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissions.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPermissionsEnumerable.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPlatformFee.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IPrimarySale.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRouter.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IRoyalty.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Ownable.json';\nimport 'cross-fetch';\nimport 'eventemitter3';\nimport '@thirdweb-dev/contracts-js/dist/abis/Forwarder.json';\nimport '@thirdweb-dev/storage';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC20Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/Router.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IThirdwebContract.json';\nimport 'merkletreejs';\nimport 'fast-deep-equal';\nimport 'uuid';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC721Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IERC1155Metadata.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/IDelayedRevealDeprecated.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWFactory.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWRegistry.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/ContractPublisher.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryLogic.json';\nimport '@thirdweb-dev/contracts-js/dist/abis/TWMultichainRegistryRouter.json';\nimport 'bs58';\n\n/**\n * Create a decentralized organization for token holders to vote on proposals.\n *\n * @example\n *\n * ```javascript\n * import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n *\n * const sdk = new ThirdwebSDK(\"{{chainName}}\");\n * const contract = await sdk.getContract(\"{{contract_address}}\", \"vote\");\n * ```\n *\n * @public\n */\nclass Vote {\n  /**\n   * @internal\n   */\n\n  get chainId() {\n    return this._chainId;\n  }\n  constructor(network, address, storage) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    let abi = arguments.length > 4 ? arguments[4] : undefined;\n    let chainId = arguments.length > 5 ? arguments[5] : undefined;\n    let contractWrapper = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : new ContractWrapper(network, address, abi, options);\n    _defineProperty(this, \"contractWrapper\", void 0);\n    _defineProperty(this, \"storage\", void 0);\n    _defineProperty(this, \"abi\", void 0);\n    _defineProperty(this, \"metadata\", void 0);\n    _defineProperty(this, \"encoder\", void 0);\n    _defineProperty(this, \"estimator\", void 0);\n    _defineProperty(this, \"events\", void 0);\n    _defineProperty(this, \"interceptor\", void 0);\n    _defineProperty(this, \"_chainId\", void 0);\n    this._chainId = chainId;\n    this.abi = abi;\n    this.contractWrapper = contractWrapper;\n    this.storage = storage;\n    this.metadata = new ContractMetadata(this.contractWrapper, VoteContractSchema, this.storage);\n    this.encoder = new ContractEncoder(this.contractWrapper);\n    this.estimator = new GasCostEstimator(this.contractWrapper);\n    this.events = new ContractEvents(this.contractWrapper);\n    this.interceptor = new ContractInterceptor(this.contractWrapper);\n  }\n  onNetworkUpdated(network) {\n    this.contractWrapper.updateSignerOrProvider(network);\n  }\n  getAddress() {\n    return this.contractWrapper.readContract.address;\n  }\n\n  /** ******************************\n   * READ FUNCTIONS\n   *******************************/\n\n  /**\n   * Get a proposal by id.\n   *\n   * @param proposalId - The proposal id to get.\n   * @returns - The proposal.\n   */\n  async get(proposalId) {\n    const all = await this.getAll();\n    const proposals = all.filter(p => p.proposalId.eq(BigNumber.from(proposalId)));\n    if (proposals.length === 0) {\n      throw new Error(\"proposal not found\");\n    }\n    return proposals[0];\n  }\n\n  /**\n   * Get All Proposals\n   *\n   * @remarks Get all the proposals in this contract.\n   *\n   * @example\n   * ```javascript\n   * const proposals = await contract.getAll();\n   * console.log(proposals);\n   * ```\n   *\n   * @returns - All the proposals in the contract.\n   */\n  async getAll() {\n    return Promise.all((await this.contractWrapper.readContract.getAllProposals()).map(async data => ({\n      proposalId: data.proposalId,\n      proposer: data.proposer,\n      description: data.description,\n      startBlock: data.startBlock,\n      endBlock: data.endBlock,\n      state: await this.contractWrapper.readContract.state(data.proposalId),\n      votes: await this.getProposalVotes(data.proposalId),\n      executions: data[3].map((c, i) => ({\n        toAddress: data.targets[i],\n        nativeTokenValue: c,\n        transactionData: data.calldatas[i]\n      }))\n    })));\n  }\n\n  /**\n   * Get the votes for a specific proposal\n   * @param proposalId - the proposalId\n   */\n  async getProposalVotes(proposalId) {\n    const votes = await this.contractWrapper.readContract.proposalVotes(proposalId);\n    return [{\n      type: VoteType.Against,\n      label: \"Against\",\n      count: votes.againstVotes\n    }, {\n      type: VoteType.For,\n      label: \"For\",\n      count: votes.forVotes\n    }, {\n      type: VoteType.Abstain,\n      label: \"Abstain\",\n      count: votes.abstainVotes\n    }];\n  }\n\n  /**\n   * Check If Wallet Voted\n   *\n   * @remarks Check if a specified wallet has voted a specific proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * // The address of the wallet you want to check to see if they voted\n   * const address = \"{{wallet_address}}\";\n   *\n   * await contract.hasVoted(proposalId, address);\n   * ```\n   *\n   * @param proposalId - The unique identifier of a proposal .\n   * @param account - (optional) wallet account address. Defaults to connected signer.\n   * @returns - True if the account has already voted on the proposal.\n   */\n  async hasVoted(proposalId, account) {\n    if (!account) {\n      account = await this.contractWrapper.getSignerAddress();\n    }\n    return this.contractWrapper.readContract.hasVoted(proposalId, account);\n  }\n\n  /**\n   * Can Execute\n   *\n   * @remarks Check if a proposal can be executed (if the proposal has succeeded).\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to check\n   * const proposalId = \"0\";\n   * const canExecute = await contract.canExecute(proposalId);\n   * console.log(canExecute);\n   * ```\n   *\n   * @param proposalId - The proposal ID to check.\n   * @returns - True if the proposal can be executed, false otherwise.\n   */\n  async canExecute(proposalId) {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    try {\n      await this.contractWrapper.callStatic().execute(tos, values, datas, descriptionHash);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Check the balance of the project wallet in the native token of the chain\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balance() {\n    const balance = await this.contractWrapper.readContract.provider.getBalance(this.contractWrapper.readContract.address);\n    return {\n      name: \"\",\n      symbol: \"\",\n      decimals: 18,\n      value: balance,\n      displayValue: ethers.utils.formatUnits(balance, 18)\n    };\n  }\n\n  /**\n   * Check the balance of the project wallet in a particular\n   * ERC20 token contract\n   *\n   * @returns - The balance of the project in the native token of the chain\n   */\n  async balanceOfToken(tokenAddress) {\n    const erc20 = new Contract(tokenAddress, ERC20Abi, this.contractWrapper.getProvider());\n    return await fetchCurrencyValue(this.contractWrapper.getProvider(), tokenAddress, await erc20.balanceOf(this.contractWrapper.readContract.address));\n  }\n\n  /**\n   * Find a proposal by its id.\n   *\n   * @internal\n   * @param proposalId - Proposal to check for\n   */\n  async ensureExists(proposalId) {\n    try {\n      await this.contractWrapper.readContract.state(proposalId);\n    } catch (e) {\n      throw Error(`Proposal ${proposalId} not found`);\n    }\n  }\n\n  /**\n   * Get the Vote contract configuration\n   */\n  async settings() {\n    const [votingDelay, votingPeriod, votingTokenAddress, votingQuorumFraction, proposalTokenThreshold] = await Promise.all([this.contractWrapper.readContract.votingDelay(), this.contractWrapper.readContract.votingPeriod(), this.contractWrapper.readContract.token(), this.contractWrapper.readContract[\"quorumNumerator()\"](), this.contractWrapper.readContract.proposalThreshold()]);\n    const votingTokenMetadata = await fetchCurrencyMetadata(this.contractWrapper.getProvider(), votingTokenAddress);\n    return {\n      votingDelay: votingDelay.toString(),\n      votingPeriod: votingPeriod.toString(),\n      votingTokenAddress,\n      votingTokenMetadata,\n      votingQuorumFraction: votingQuorumFraction.toString(),\n      proposalTokenThreshold: proposalTokenThreshold.toString()\n    };\n  }\n\n  /** ******************************\n   * WRITE FUNCTIONS\n   *******************************/\n\n  /**\n   * Create Proposal\n   *\n   * @remarks Create a new proposal for token holders to vote on.\n   *\n   * @example\n   * ```javascript\n   * // The description of the proposal you want to pass\n   * const description = \"This is a great proposal - vote for it!\"\n   * // You can (optionally) pass in contract calls that will get executed when the proposal is executed.\n   * const executions = [\n   *   {\n   *     // The contract you want to make a call to\n   *     toAddress: \"0x...\",\n   *     // The amount of the native currency to send in this transaction\n   *     nativeTokenValue: 0,\n   *     // Transaction data that will be executed when the proposal is executed\n   *     // This is an example transfer transaction with a token contract (which you would need to setup in code)\n   *     transactionData: tokenContract.encoder.encode(\n   *       \"transfer\", [\n   *         fromAddress,\n   *         amount,\n   *       ]\n   *     ),\n   *   }\n   * ]\n   *\n   * const proposal = await contract.propose(description, executions);\n   * ```\n   *\n   * @param description - The description of the proposal.\n   * @param executions - A set of executable transactions that will be run if the proposal is passed and executed.\n   * @returns - The id of the created proposal and the transaction receipt.\n   */\n  async propose(description, executions) {\n    if (!executions) {\n      executions = [{\n        toAddress: this.contractWrapper.readContract.address,\n        nativeTokenValue: 0,\n        transactionData: \"0x\"\n      }];\n    }\n    const tos = executions.map(p => p.toAddress);\n    const values = executions.map(p => p.nativeTokenValue);\n    const datas = executions.map(p => p.transactionData);\n    const receipt = await this.contractWrapper.sendTransaction(\"propose\", [tos, values, datas, description]);\n    const event = this.contractWrapper.parseLogs(\"ProposalCreated\", receipt?.logs);\n    return {\n      id: event[0].args.proposalId,\n      receipt\n    };\n  }\n\n  /**\n   * Vote\n   *\n   * @remarks Vote on an active proposal\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID of the proposal you want to vote on\n   * const proposalId = \"0\";\n   * // The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\n   * const voteType = VoteType.For;\n   * // The (optional) reason for the vote\n   * const reason = \"I like this proposal!\";\n   *\n   * await contract.vote(proposalId, voteType, reason);\n   * ```\n   * @param proposalId - The proposal to cast a vote on.\n   * @param voteType - The position the voter is taking on their vote.\n   * @param reason - (optional) The reason for the vote.\n   */\n  async vote(proposalId, voteType) {\n    let reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    await this.ensureExists(proposalId);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"castVoteWithReason\", [proposalId, voteType, reason])\n    };\n  }\n\n  /**\n   * Execute Proposal\n   *\n   * @remarks Execute the related transactions for a proposal if the proposal succeeded.\n   *\n   * @example\n   * ```javascript\n   * // The proposal ID ofthe proposal you want to execute\n   * const proposalId = \"0\"\n   * await contract.execute(proposalId);\n   * ```\n   *\n   * @param proposalId - The proposal id to execute.\n   */\n  async execute(proposalId) {\n    await this.ensureExists(proposalId);\n    const proposal = await this.get(proposalId);\n    const tos = proposal.executions.map(p => p.toAddress);\n    const values = proposal.executions.map(p => p.nativeTokenValue);\n    const datas = proposal.executions.map(p => p.transactionData);\n    const descriptionHash = ethers.utils.id(proposal.description);\n    return {\n      receipt: await this.contractWrapper.sendTransaction(\"execute\", [tos, values, datas, descriptionHash])\n    };\n  }\n\n  /**\n   * @internal\n   */\n  async call(functionName) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.contractWrapper.call(functionName, ...args);\n  }\n}\n\nexport { Vote };\n"],"names":["Vote","network","address","storage","options","arguments","length","undefined","abi","chainId","contractWrapper","ContractWrapper","_defineProperty","this","_chainId","metadata","ContractMetadata","VoteContractSchema","encoder","ContractEncoder","estimator","GasCostEstimator","events","ContractEvents","interceptor","ContractInterceptor","updateSignerOrProvider","readContract","proposalId","getAll","all","proposals","filter","p","eq","BigNumber","Error","Promise","getAllProposals","map","data","proposer","description","startBlock","endBlock","state","getProposalVotes","c","i","toAddress","targets","nativeTokenValue","transactionData","calldatas","votes","executions","proposalVotes","type","VoteType","label","count","againstVotes","forVotes","abstainVotes","account","getSignerAddress","hasVoted","ensureExists","get","proposal","tos","values","datas","descriptionHash","ethers","callStatic","execute","provider","getBalance","balance","name","symbol","decimals","value","displayValue","tokenAddress","erc20","Contract","ERC20Abi","getProvider","fetchCurrencyValue","balanceOf","votingDelay","votingPeriod","token","proposalThreshold","votingTokenAddress","votingQuorumFraction","proposalTokenThreshold","fetchCurrencyMetadata","votingTokenMetadata","toString","sendTransaction","receipt","event","parseLogs","logs","id","args","voteType","reason","functionName","_len","Array","_key","call"],"sourceRoot":""}